# Test: Use integer literals (int)

Assert that `n + m` is `8` where n = 12 and m = -4.

Assert that `n * m` is `0` where n = 12 and m = 0.

Assert that `n` is `Integer.MAX_VALUE` where n = 2147483647.

Assert that `n` is `Integer.MAX_VALUE` where n = 0x7fff_ffff.

Assert that `n` is `Integer.MAX_VALUE` where n = 0177_7777_7777.

Assert that `n` is `Integer.MAX_VALUE` where n =
0b0111_1111_1111_1111_1111_1111_1111_1111.

Assert that `n` is `Integer.MIN_VALUE` where n = -2147483648.

Assert that `n` is `Integer.MIN_VALUE` where n = 0x8000_0000.

Assert that `n` is `Integer.MIN_VALUE` where n = 0200_0000_0000.

Assert that `n` is `Integer.MIN_VALUE` where n =
0b1000_0000_0000_0000_0000_0000_0000_0000.

Assert that `n` is `-1` where n = 0xffff_ffff.

Assert that `n` is `-1` where n = 0377_7777_7777.

Assert that `n` is `-1` where n = 0b1111_1111_1111_1111_1111_1111_1111_1111.

# Test: Use integer literals (long)

Assert that `n + m` is `8L` where n = 12L and m = -4L.

Assert that `n * m` is `0L` where n = 12L and m = 0L.

Assert that `n` is `Long.MAX_VALUE` where n = 9223372036854775807L.

Assert that `n` is `Long.MAX_VALUE` where n = 0x7fff_ffff_ffff_ffffL.

Assert that `n` is `Long.MAX_VALUE` where n = 07_7777_7777_7777_7777_7777L.

Assert that `n` is `Long.MAX_VALUE` where n =
0b0111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111L.

Assert that `n` is `Long.MIN_VALUE` where n = -9223372036854775808L.

Assert that `n` is `Long.MIN_VALUE` where n = 0x8000_0000_0000_0000L.

Assert that `n` is `Long.MIN_VALUE` where n = 010_0000_0000_0000_0000_0000L.

Assert that `n` is `Long.MIN_VALUE` where n =
0b1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000L.

Assert that `n` is `-1L` where n = 0xffff_ffff_ffff_ffffL .

Assert that `n` is `-1L` where n = 017_7777_7777_7777_7777_7777L.

Assert that `n` is `-1L` where n =
0b1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111L.

# Test: Use floating point literals (float)

Assert `n` is `Float.MAX_VALUE` where n = 3.4028235e38f. 

Assert `n` is `Float.MIN_VALUE` where n = 1.40e-45f. 

Assert `n` is `Float.parseFloat("1e1f")` where n = 1e1f.

Assert `n` is `Float.parseFloat("2.f")` where n = 2.f.

Assert `n` is `Float.parseFloat(".3f")` where n = .3f.

Assert `n` is `Float.parseFloat("0f")` where n = 0f.

Assert `n` is `Float.parseFloat("3.14f")` where n = 3.14f.

Assert `n` is `Float.parseFloat("6.022137e+23f")` where n = 6.022137e+23f.

# Test: Use floating point literals (double)

Assert `n` is `Double.MAX_VALUE` where n = 1.7976931348623157e308. 

Assert `n` is `Double.MIN_VALUE` where n = 4.9e-324. 

Assert `n` is `Double.parseDouble("1e1")` where n = 1e1.

Assert `n` is `Double.parseDouble("2.0")` where n = 2.0.

Assert `n` is `Double.parseDouble(".3")` where n = .3.

Assert `n` is `Double.parseDouble("0.0")` where n = 0.0.

Assert `n` is `Double.parseDouble("3.14")` where n = 3.14.

Assert `n` is `Double.parseDouble("1e-9d")` where n = 1e-9d.

Assert `n` is `Double.parseDouble("1e137")` where n = 1e137.

# Test: Use boolean literals

Assert `n` is `true` where n is true.

Assert `n` is `false` where n is false.

# Test: Use character literals

Assert `n` is `'\\' as char` where n is '\\'.

Assert `n` is `'\'' as char` where n is '\''.

Assert `n` is `'\u03a9' as char` where n is '\u03a9'.

Assert `n` is `Character.MAX_VALUE` where n is '\uFFFF'.

Assert `n` is `'\177' as char` where n is '\177'.

Assert `n` is `'™' as char` where n is '™'.

# Test: Use string literals

Assert `n` is `''` where n is "".

Assert `n` is `'"'` where n is "\"".

Assert `n` is `'This is a string'` where n is "This is a string".
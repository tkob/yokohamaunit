{"name":"YokohamaUnit","tagline":"A noiseless unit testing framework for Java","body":"# YokohamaUnit\r\n\r\nYokohamaUnit is a unit testing framework for Java.\r\n\r\nTests are written in a dedicated external DSL (and Groovy as an embedded\r\nexpression language) and directly compiled into JUnit test class files.\r\n\r\n## A Taste of YokohamaUnit\r\n\r\n```\r\n*[StringUtils]: yokohama.unit.example.StringUtils\r\n\r\n# Test: Test cases for `toSnakeCase`\r\n\r\nAssert that `StringUtils.toSnakeCase(input)` is `expected`\r\nfor all input and expected in Table [1].\r\n\r\nAssert that `StringUtils.toSnakeCase(null)` throws\r\nan instance of `java.lang.NullPointerException`.\r\n\r\n| input           | expected          |\r\n| --------------- | ----------------- |\r\n| \"\"              | \"\"                |\r\n| \"aaa\"           | \"aaa\"             |\r\n| \"HelloWorld\"    | \"hello_world\"     |\r\n| \"practiceJunit\" | \"practice_junit\"  |\r\n| \"practiceJUnit\" | \"practice_j_unit\" |\r\n| \"hello_world\"   | \"hello_world\"     |\r\n[1]\r\n```\r\n\r\n## Usage with Gradle\r\n\r\nAdd to your build.gradle the following:\r\n\r\n```\r\nbuildscript {\r\n    repositories {\r\n        mavenCentral()\r\n        jcenter()\r\n        maven { url 'https://dl.bintray.com/tkob/maven' }\r\n    }\r\n    dependencies {\r\n        classpath 'yokohama.unit:yokohamaunit:0.1.0'\r\n    }\r\n}\r\n\r\ndependencies {\r\n    testCompile group: 'org.mockito', name: 'mockito-core', version: '1.10.8'\r\n    testCompile group: 'junit', name: 'junit', version: '4.11'\r\n    testCompile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.3.7'\r\n}\r\n\r\ntask compileDocy << {\r\n    ext.classpath = configurations.testCompile.join(File.pathSeparator) +\r\n                    File.pathSeparator + sourceSets.main.output.classesDir +\r\n                    File.pathSeparator + sourceSets.test.output.classesDir\r\n    ext.classesDir = sourceSets.test.output.classesDir\r\n    ext.baseDir = \"$projectDir/src/test/docy\"\r\n    ext.sourceSet = fileTree(dir: ext.baseDir, include: '**/*.docy')\r\n    ext.args = [\r\n        'docyc',\r\n        '-cp', ext.classpath,\r\n        '-d', ext.classesDir,\r\n        '-basedir', ext.baseDir\r\n        ]\r\n    ext.args += ext.sourceSet.getFiles()\r\n\r\n    if (!ext.classesDir.exists()) {\r\n        ext.classesDir.mkdirs()\r\n    }\r\n    def main = new yokohama.unit.Main(new yokohama.unit.CommandFactory());\r\n    main.run(System.in, System.out, System.err, ext.args as String[])\r\n}\r\ncompileDocy.dependsOn compileTestJava\r\ntest.dependsOn compileDocy\r\n```\r\n\r\nAn example project is available from https://github.com/tkob/yokohamaunit-example\r\n\r\n## Usage from Command Line\r\n\r\nDownload and extract the\r\n[latest release](https://github.com/tkob/yokohamaunit/releases),\r\nand add its `bin` directory to your PATH.\r\n\r\nThen, you can compile docy source files by typing something like:\r\n\r\n```\r\nyokohamaunit docyc -cp PROJECT_CLASSPATH -d build/classes/test -basedir src/test/docy DOCY_FILES...\r\n```\r\n\r\nwhere PROJECT_CLASSPATH is the classpath of your project and DOCY_FILES are\r\ndocy files to compile which are in `src/test/docy` directory.\r\n(DOCY_FILES must be prefixed with `src/test/docy`)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
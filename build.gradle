apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'jacoco'
apply plugin: 'me.champeau.gradle.antlr4'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

compileJava {
    options.compilerArgs << "-Xlint:unchecked"
}

compileTestJava {
    options.compilerArgs << "-Xlint:unchecked"
}

applicationName = 'yokohamaunit'
mainClassName = 'yokohama.unit.Main'

if (!hasProperty('mainClass')) {
    ext.mainClass = mainClassName
}

repositories {
    mavenCentral()
    // You may define additional repositories, or even remove "mavenCentral()".
    // Read more about repositories here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories
}

configurations {
    providedCompile
}

dependencies {
    // You can read more about how to add dependency here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:how_to_declare_your_dependencies
    testCompile group: 'junit', name: 'junit', version: '4.10'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.8'
    testCompile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.3.7'
    providedCompile group: "org.projectlombok", name: "lombok", version: "1.14.8"
    compile group: "org.apache.poi", name: "poi-ooxml", version: "3.10.1"
    compile group: "org.apache.commons", name: "commons-lang3", version: "3.3.2"
    compile group: "org.apache.commons", name: "commons-csv", version: "1.1"
    compile group: "org.apache.commons", name: "commons-collections4", version: "4.0"
    compile group: "commons-io", name: "commons-io", version: "2.4"
    compile group: "commons-cli", name: "commons-cli", version: "1.2"
    compile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
    compile group: 'ognl', name: 'ognl', version: '3.0.8'
    compile 'com.google.code.findbugs:bcel-findbugs:6.0'
    compile 'org.springframework:spring-context:4.1.6.RELEASE'
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    antlr4 group: "org.antlr", name: "antlr4", version: "4.5"
}

compileJava {
    sourceSets.main.compileClasspath += configurations.providedCompile
    sourceSets.test.compileClasspath += configurations.providedCompile
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        // https://github.com/melix/antlr4-gradle-plugin
        classpath 'me.champeau.gradle:antlr4-gradle-plugin:0.1'
    }
}

// make the Java compile task depend on the antlr4 task
compileJava.dependsOn antlr4

// add the generated source files to the list of java sources
sourceSets.main.java.srcDirs += antlr4.output

// add antlr4 to classpath
configurations {
   compile.extendsFrom antlr4
}

antlr4.extraArgs = ["-package", "yokohama.unit.grammar"]

task console(dependsOn: 'classes', type: JavaExec) {
    main = 'groovy.ui.Console'
    classpath = sourceSets.test.runtimeClasspath
}

def generatedSources = [ 'yokohama/unit/grammar/**' ]

test {
     jacoco {
          excludes += generatedSources
     }
}

jacocoTestReport {
     doFirst {
          classDirectories = fileTree(dir: "${buildDir}/classes/main/").exclude(generatedSources)
     }
     reports {
          xml.enabled true
     }
}

task checkDocumentConsistency << {
    ["yokohama/unit/ast", "yokohama/unit/ast_junit"].each { packagePath ->
        // Check if all AST classes are documented in package-info.java
        def packageInfo = file("src/main/java/${packagePath}/package-info.java").text
        def missing = file("src/main/java/${packagePath}")
            .list({ f, name ->
                    !name.endsWith("Visitor.java") &&
                    !name.endsWith("Strategy.java") &&
                    !name.startsWith("Import") &&
                    !name.endsWith(".original~") &&
                    !name.equals("Span.java") &&
                    !name.equals("Position.java") &&
                    !name.equals("Describable.java") &&
                    !name.equals("ErrorMessage.java") &&
                    !name.equals("package-info.java")
                } as FilenameFilter)
            .grep({ name ->
                    def className = name.find(~/(\w+)\.java/) { _, className -> className }
                    !packageInfo.contains(className)
                })
            if (missing.size() > 0) {
                ant.fail("These classes are missing in ${packagePath}/package-info.java: " + missing)
            }
    }
}
check.dependsOn checkDocumentConsistency

task compileDocy(type:Exec) {
    ext.classpath = configurations.testCompile.join(File.pathSeparator)
    ext.classesDir = sourceSets.test.output.classesDir
    ext.baseDir = "$projectDir/src/test/docy"
    ext.sourceSet = fileTree(dir: ext.baseDir, include: '**/*.docy')
    ext.command = [
        "$projectDir/build/install/yokohamaunit/bin/yokohamaunit"
        + (System.getProperty("os.name").contains("Windows") ? ".bat" : ""),
        'docyc',
        //'-cp', ext.classpath,
        '-d', ext.classesDir,
        '-basedir', ext.baseDir
        ]
    ext.command += ext.sourceSet.getFiles()

    if (!ext.classesDir.exists()) {
        ext.classesDir.mkdirs()
    }
    environment DOCY_CLASSPATH: ext.classpath
    commandLine ext.command
}
compileDocy.dependsOn installApp
compileDocy.dependsOn compileTestJava
test.dependsOn compileDocy

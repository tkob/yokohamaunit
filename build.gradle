apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'jacoco'
apply plugin: 'me.champeau.gradle.antlr4'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

compileJava {
    options.compilerArgs << "-Xlint:unchecked"
}

compileTestJava {
    options.compilerArgs << "-Xlint:unchecked"
}

applicationName = 'yokohamaunit'
mainClassName = 'yokohama.unit.Main'

if (!hasProperty('mainClass')) {
    ext.mainClass = mainClassName
}

repositories {
    mavenCentral()
    // You may define additional repositories, or even remove "mavenCentral()".
    // Read more about repositories here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories
}

configurations {
    providedCompile
}

dependencies {
    // You can read more about how to add dependency here:
    //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:how_to_declare_your_dependencies
    testCompile group: 'junit', name: 'junit', version: '4.10'
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.8'
    testCompile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.3.7'
    testCompile group: 'ognl', name: 'ognl', version: '3.0.8'
    testCompile files("${System.properties['java.home']}/../lib/tools.jar") // for Java Compile API
    providedCompile group: "org.projectlombok", name: "lombok", version: "1.14.8"
    compile group: "org.apache.poi", name: "poi-ooxml", version: "3.10.1"
    compile group: "org.apache.commons", name: "commons-lang3", version: "3.3.2"
    compile group: "org.apache.commons", name: "commons-csv", version: "1.1"
    compile group: "commons-io", name: "commons-io", version: "2.4"
    compile group: "commons-cli", name: "commons-cli", version: "1.2"
    compile group: "org.functionaljava", name: "functionaljava", version: "4.2-beta-1"
    compile group: "org.functionaljava", name: "functionaljava-java8", version: "4.2-beta-1"
}

compileJava {
    sourceSets.main.compileClasspath += configurations.providedCompile
    sourceSets.test.compileClasspath += configurations.providedCompile
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        // https://github.com/melix/antlr4-gradle-plugin
        classpath 'me.champeau.gradle:antlr4-gradle-plugin:0.1'
    }
}

// make the Java compile task depend on the antlr4 task
compileJava.dependsOn antlr4

// add the generated source files to the list of java sources
sourceSets.main.java.srcDirs += antlr4.output

// add antlr4 to classpath
configurations {
   compile.extendsFrom antlr4
}

antlr4.extraArgs = ["-package", "yokohama.unit.grammar"]

task console(dependsOn: 'classes', type: JavaExec) {
    main = 'groovy.ui.Console'
    classpath = sourceSets.test.runtimeClasspath
}

def generatedSources = [ 'yokohama/unit/grammar/**' ]

test {
     jacoco {
          excludes += generatedSources
     }
}

jacocoTestReport {
     doFirst {
          classDirectories = fileTree(dir: "${buildDir}/classes/main/").exclude(generatedSources)
     }
     reports {
          xml.enabled true
     }
}
